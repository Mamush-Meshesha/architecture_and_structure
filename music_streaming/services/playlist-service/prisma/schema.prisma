generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Playlist {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String   @map("user_id")
  isPublic    Boolean  @default(false) @map("is_public")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  songs PlaylistSong[]

  @@map("playlists")
}

model PlaylistSong {
  id         String   @id @default(uuid())
  playlistId String   @map("playlist_id")
  songId     String   @map("song_id")
  position   Int
  addedAt    DateTime @default(now()) @map("added_at")

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@unique([playlistId, songId])
  @@map("playlist_songs")
}

model Song {
  id          String   @id @default(uuid())
  title       String
  artistId    String   @map("artist_id")
  artistName  String   @map("artist_name")
  albumId     String?  @map("album_id")
  albumName   String?  @map("album_name")
  duration    Int
  genre       String?
  releaseDate DateTime? @map("release_date")
  artworkUrl  String?  @map("artwork_url")
  playCount   BigInt   @default(0) @map("play_count")
  isExplicit  Boolean  @default(false) @map("is_explicit")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("songs")
}

model Like {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  songId    String   @map("song_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, songId])
  @@map("likes")
}
