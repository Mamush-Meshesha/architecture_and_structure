// Auth Service Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  DRIVER
  ADMIN
  PROPERTY_OWNER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum KYCStatus {
  NOT_SUBMITTED
  PENDING
  APPROVED
  REJECTED
}

enum Language {
  ENGLISH
  AMHARIC
  OROMO
  TIGRINYA
}

model User {
  id                String      @id @default(uuid())
  phone             String      @unique
  email             String?     @unique
  password          String
  firstName         String?
  lastName          String?
  role              UserRole    @default(CUSTOMER)
  status            UserStatus  @default(PENDING_VERIFICATION)
  language          Language    @default(ENGLISH)
  profilePicture    String?
  emailVerified     Boolean     @default(false)
  phoneVerified     Boolean     @default(false)
  twoFactorEnabled  Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  lastLoginAt       DateTime?
  
  // Relations
  kyc               KYC?
  sessions          Session[]
  refreshTokens     RefreshToken[]
  passwordResets    PasswordReset[]
  
  @@index([phone])
  @@index([email])
  @@index([role])
  @@index([status])
  @@map("users")
}

model KYC {
  id                String      @id @default(uuid())
  userId            String      @unique
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Personal Information
  dateOfBirth       DateTime?
  nationality       String?
  idType            String?
  idNumber          String?
  idFrontImage      String?
  idBackImage       String?
  selfieImage       String?
  
  // Address
  region            String?
  city              String?
  subcity           String?
  woreda            String?
  kebele            String?
  houseNumber       String?
  
  // Driver Specific
  driverLicenseNumber String?
  driverLicenseImage  String?
  vehicleRegistration String?
  
  // Status
  status            KYCStatus   @default(NOT_SUBMITTED)
  submittedAt       DateTime?
  reviewedAt        DateTime?
  reviewedBy        String?
  rejectionReason   String?
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([userId])
  @@index([status])
  @@map("kyc")
}

model Session {
  id                String      @id @default(uuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  token             String      @unique
  ipAddress         String?
  userAgent         String?
  expiresAt         DateTime
  createdAt         DateTime    @default(now())
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("sessions")
}

model RefreshToken {
  id                String      @id @default(uuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  token             String      @unique
  expiresAt         DateTime
  createdAt         DateTime    @default(now())
  
  @@index([userId])
  @@index([token])
  @@map("refresh_tokens")
}

model PasswordReset {
  id                String      @id @default(uuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  token             String      @unique
  expiresAt         DateTime
  usedAt            DateTime?
  createdAt         DateTime    @default(now())
  
  @@index([userId])
  @@index([token])
  @@map("password_resets")
}
